
class Myobj: #我的对象
    pass


class MyobjIteator :  #我的对象迭代器
    def __init__(self,target):
        self.target = target
        self.index = 0

    def __next__(self):
        #如果索引越界 则抛出异常
        if self.index > len(self.target) -1:
            raise StopIteration()
        #返回下一个元素
        item = self.target[self.index]
        self.index += 1
        return item

class MyobjManager:
    # 可迭代对象： 我的对象迭代器
    def __init__(self,myobj):
        self.myobj = myobj

    def __iter__(self):
        #创建迭代器对象，传递 需要迭代的数据
        return  MyobjIteator(self.myobj)

#------ 界面使用端  -------------
manager = MyobjManager([Myobj(),Myobj(),Myobj()])
# 1）新建我的对象迭代器，内部参数是一个列表，列表元素是 我的对象类型元素
for item in manager:  # 一般外部普通使用
    print(item)

# 内部运行步骤
iterator = manager.__iter__()
while True:
    try:
        item = iterator.__next__()
        print(item)
    except:
        break

